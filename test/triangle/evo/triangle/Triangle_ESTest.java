/*
 * This file was automatically generated by EvoSuite
 * Thu Jun 28 17:25:05 GMT 2018
 */

package triangle.evo.triangle;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import triangle.Triangle;

//@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class Triangle_ESTest {// extends Triangle_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Triangle triangle0 = new Triangle();
      Triangle.m7 = true;
      int int0 = triangle0.triangle(16, 7, 2);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Triangle triangle0 = new Triangle();
      Triangle.m5 = true;
      int int0 = triangle0.triangle(3157, 1659, 769);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Triangle triangle0 = new Triangle();
      Triangle.m3 = true;
      int int0 = triangle0.triangle(2863, 108, 229);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Triangle triangle0 = new Triangle();
      int int0 = triangle0.triangle(619, 229, (-1));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Triangle triangle0 = new Triangle();
      int int0 = triangle0.triangle(1530, (-795), 229);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Triangle.m1 = true;
      Triangle triangle0 = new Triangle();
      int int0 = triangle0.triangle(2, (-1), 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Triangle triangle0 = new Triangle();
      int int0 = triangle0.triangle((-1), (-1), 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Triangle triangle0 = new Triangle();
      Triangle.m18 = true;
      int int0 = triangle0.triangle(4, 4, 2);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Triangle triangle0 = new Triangle();
      Triangle.m7 = true;
      int int0 = triangle0.triangle(2432, 1, 5);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Triangle triangle0 = new Triangle();
      Triangle.m4 = true;
      int int0 = triangle0.triangle(1, 1, 1);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Triangle triangle0 = new Triangle();
      Triangle.m3 = true;
      int int0 = triangle0.triangle(229, 619, 2863);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Triangle.m0 = true;
      Triangle triangle0 = new Triangle();
      int int0 = triangle0.triangle(42, 0, 1333);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Triangle triangle0 = new Triangle();
      Triangle.m23 = true;
      Triangle.m24 = true;
      Triangle.m9 = true;
      Triangle.m2 = true;
      int int0 = triangle0.triangle(1292, 814, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Triangle triangle0 = new Triangle();
      Triangle.m23 = true;
      Triangle.m24 = true;
      Triangle.m9 = true;
      Triangle.m2 = true;
      triangle0.m25 = true;
      int int0 = triangle0.triangle(814, 5, (-1135));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Triangle triangle0 = new Triangle();
      Triangle.m23 = true;
      Triangle.m9 = true;
      Triangle.m2 = true;
      triangle0.m25 = true;
      int int0 = triangle0.triangle(814, 5, (-1135));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Triangle triangle0 = new Triangle();
      Triangle.m23 = true;
      int int0 = triangle0.triangle(1, 1842, 1842);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Triangle triangle0 = new Triangle();
      Triangle.m16 = true;
      Triangle.m23 = true;
      int int0 = triangle0.triangle(1296, 1296, 1296);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Triangle triangle0 = new Triangle();
      Triangle.m3 = true;
      Triangle.m21 = true;
      Triangle.m7 = true;
      int int0 = triangle0.triangle(16, 16, 16);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Triangle triangle0 = new Triangle();
      Triangle.m20 = true;
      Triangle.m5 = true;
      Triangle.m22 = true;
      Triangle.m6 = true;
      Triangle.m21 = true;
      int int0 = triangle0.triangle(1, 1842, 2645);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Triangle triangle0 = new Triangle();
      Triangle.m20 = true;
      Triangle.m5 = true;
      Triangle.m22 = true;
      Triangle.m6 = true;
      int int0 = triangle0.triangle(1, 1842, 2645);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Triangle triangle0 = new Triangle();
      Triangle.m20 = true;
      Triangle.m5 = true;
      Triangle.m6 = true;
      int int0 = triangle0.triangle(1, 1842, 2645);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Triangle.m3 = true;
      Triangle.m18 = true;
      Triangle.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Triangle triangle0 = new Triangle();
      Triangle.m19 = true;
      Triangle.m2 = true;
      Triangle.m18 = true;
      int int0 = triangle0.triangle(3915, 3915, (-1129));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Triangle triangle0 = new Triangle();
      Triangle.m19 = true;
      int int0 = triangle0.triangle(2, 2, 1336);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Triangle triangle0 = new Triangle();
      Triangle.m17 = true;
      int int0 = triangle0.triangle(554, 554, 3);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Triangle triangle0 = new Triangle();
      Triangle.m8 = true;
      Triangle.m17 = true;
      Triangle.m5 = true;
      int int0 = triangle0.triangle(2645, 2645, 2645);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Triangle triangle0 = new Triangle();
      Triangle.m15 = true;
      int int0 = triangle0.triangle(1336, 819, 1890);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Triangle triangle0 = new Triangle();
      Triangle.m15 = true;
      int int0 = triangle0.triangle(1890, 1, 3);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Triangle triangle0 = new Triangle();
      Triangle.m14 = false;
      Triangle.m9 = true;
      Triangle.m14 = true;
      Triangle.m11 = true;
      int int0 = triangle0.triangle(3, 3, 3);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Triangle triangle0 = new Triangle();
      Triangle.m14 = false;
      Triangle.m9 = true;
      Triangle.m14 = true;
      int int0 = triangle0.triangle(3, 3, 3);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Triangle triangle0 = new Triangle();
      Triangle.m5 = true;
      triangle0.m10 = true;
      Triangle.m13 = true;
      int int0 = triangle0.triangle(1, 2645, 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Triangle.m12 = true;
      Triangle triangle0 = new Triangle();
      int int0 = triangle0.triangle(15, 2092, 3);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Triangle triangle0 = new Triangle();
      Triangle.m5 = true;
      triangle0.m10 = true;
      int int0 = triangle0.triangle(1, 2645, 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Triangle triangle0 = new Triangle();
      Triangle.m5 = true;
      Triangle.m6 = true;
      int int0 = triangle0.triangle(1, 1842, 2645);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Triangle triangle0 = new Triangle();
      Triangle.m5 = true;
      int int0 = triangle0.triangle(2645, 2645, 2645);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Triangle triangle0 = new Triangle();
      triangle0.m2 = true;
      int int0 = triangle0.triangle(3, 3, 3);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Triangle triangle0 = new Triangle();
      Triangle.m0 = true;
      int int0 = triangle0.triangle(0, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Triangle triangle0 = new Triangle();
      Triangle.m1 = true;
      int int0 = triangle0.triangle(4673, 0, 1890);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Triangle triangle0 = new Triangle();
      Triangle.m1 = true;
      int int0 = triangle0.triangle(1320, 1, 1296);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Triangle triangle0 = new Triangle();
      int int0 = triangle0.triangle(0, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Triangle triangle0 = new Triangle();
      Triangle.m0 = true;
      int int0 = triangle0.triangle((-2049), 218, 2);
      assertEquals(0, int0);
  }
}
